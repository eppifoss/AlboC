 1:   # Program 'primes'
 2:  # ----------------
 4:  #
# Finds all prime numbers up to 1000 (using the technique called
 5:  # "the sieve of Eratosthenes") and prints them nicely formatted.
 6:  
Parser:       <program>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
 7:  int prime[1001];  /* The sieve */
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
 8:  int LF;           /* LF */
 9:  
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <func decl>
 10:  int find_primes ()
 11:  {
 12:     /* Remove all non-primes from the sieve: */
 13:  
Parser:           <func-body>
Parser:             <type>
Parser:             </type>
Parser:             <var decl>
Parser:             </var decl>
Parser:             <type>
 14:     int i1;  int i2;
Parser:             </type>
Parser:             <var decl>
Parser:             </var decl>
Parser:             <statm list>
Parser:               <statement>
Parser:                 <for-statm>
Parser:                   <for-control>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                       <rel opr>
Parser:                       </rel opr>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
 15:     for (i1 = 2;  i1 <= 1000;  i1 = i1+1) {
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </for-control>
Parser:                   <statm list>
Parser:                     <statement>
Parser:                       <for-statm>
Parser:                         <for-control>
Parser:                           <assignment>
Parser:                             <lhs-variable>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </lhs-variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                   <factor opr>
Parser:                                   </factor opr>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </assignment>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                             <rel opr>
Parser:                             </rel opr>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                           <assignment>
Parser:                             <lhs-variable>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </lhs-variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                                 <term opr>
Parser:                                 </term opr>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <variable>
 16:        for (i2 = 2*i1;  i2 <= 1000;  i2 = i2+i1) {
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </assignment>
Parser:                         </for-control>
Parser:                         <statm list>
Parser:                           <statement>
Parser:                             <assign-statm>
Parser:                               <assignment>
Parser:                                 <lhs-variable>
Parser:                                   <variable>
Parser:                                     <expression>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                       </term>
Parser:                                     </expression>
Parser:                                   </variable>
Parser:                                 </lhs-variable>
 17:  	 prime[i2] = 0;
Parser:                                 <expression>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <number>
 18:        }
Parser:                                           </number>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </expression>
Parser:                               </assignment>
 19:     }
Parser:                             </assign-statm>
Parser:                           </statement>
Parser:                         </statm list>
 20:  }
Parser:                       </for-statm>
Parser:                     </statement>
Parser:                   </statm list>
 21:  
Parser:                 </for-statm>
Parser:               </statement>
Parser:             </statm list>
Parser:           </func-body>
Parser:         </func decl>
Parser:         <type>
Parser:         </type>
Parser:         <func decl>
Parser:           <type>
Parser:           </type>
Parser:           <param decl>
Parser:           </param decl>
Parser:           <type>
 22:  int mod(int a, int b)
Parser:           </type>
Parser:           <param decl>
 23:  {
Parser:           </param decl>
 24:     /* Computes a%b. */
 25:  
Parser:           <func-body>
Parser:             <statm list>
Parser:               <statement>
Parser:                 <return-statm>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                       <term opr>
Parser:                       </term opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                         <factor opr>
Parser:                         </factor opr>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                         <factor opr>
 26:     return a - a/b*b;
Parser:                         </factor opr>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
 27:  }
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
 28:  
Parser:                 </return-statm>
Parser:               </statement>
Parser:             </statm list>
Parser:           </func-body>
Parser:         </func decl>
Parser:         <type>
Parser:         </type>
Parser:         <func decl>
Parser:           <type>
 29:  int n_chars (int a)
Parser:           </type>
Parser:           <param decl>
 30:  {
Parser:           </param decl>
 31:     /* How many positions are needed to print 'a'? */
 32:  
Parser:           <func-body>
Parser:             <statm list>
Parser:               <statement>
Parser:                 <if-statm>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                     <rel opr>
Parser:                     </rel opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <statm list>
Parser:                     <statement>
Parser:                       <return-statm>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                             <term opr>
Parser:                             </term opr>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <function call>
Parser:                                     <expr list>
Parser:                                       <expression>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <primary>
Parser:                                               <prefix opr>
Parser:                                               </prefix opr>
Parser:                                               <operand>
Parser:                                                 <variable>
Parser:                                                 </variable>
Parser:                                               </operand>
Parser:                                             </primary>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </expression>
Parser:                                     </expr list>
Parser:                                   </function call>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
 33:     if (a < 0) { return 1 + n_chars(-a); };
Parser:                       </return-statm>
Parser:                     </statement>
Parser:                   </statm list>
Parser:                 </if-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <empty statm>
Parser:                 </empty statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <if-statm>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                     <rel opr>
Parser:                     </rel opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <statm list>
Parser:                     <statement>
Parser:                       <return-statm>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
 34:     if (a <= 9) { return 1; };
Parser:                       </return-statm>
Parser:                     </statement>
Parser:                   </statm list>
Parser:                 </if-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <empty statm>
Parser:                 </empty statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <return-statm>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <function call>
Parser:                               <expr list>
Parser:                                 <expression>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                       <factor opr>
Parser:                                       </factor opr>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <number>
Parser:                                           </number>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </expression>
Parser:                               </expr list>
Parser:                             </function call>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                       <term opr>
 35:     return n_chars(a/10)+1;
Parser:                       </term opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
 36:  }
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
 37:  
Parser:                 </return-statm>
Parser:               </statement>
Parser:             </statm list>
Parser:           </func-body>
Parser:         </func decl>
Parser:         <type>
Parser:         </type>
Parser:         <func decl>
Parser:           <type>
Parser:           </type>
Parser:           <param decl>
Parser:           </param decl>
Parser:           <type>
 38:  int pn (int v, int w)
Parser:           </type>
Parser:           <param decl>
 39:  {
Parser:           </param decl>
 40:     /* Does a 'printf("%*d", w, v)'. */
 41:     
Parser:           <func-body>
Parser:             <type>
 42:     int i;
Parser:             </type>
Parser:             <var decl>
 43:  
Parser:             </var decl>
Parser:             <statm list>
Parser:               <statement>
Parser:                 <for-statm>
Parser:                   <for-control>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <function call>
Parser:                                   <expr list>
Parser:                                     <expression>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                       </term>
Parser:                                     </expression>
Parser:                                   </expr list>
Parser:                                 </function call>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                       <rel opr>
Parser:                       </rel opr>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </for-control>
Parser:                   <statm list>
Parser:                     <statement>
Parser:                       <call-statm>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </expr list>
 44:     for (i = n_chars(v)+1;  i <= w;  i = i+1) { putchar(' '); }
Parser:                         </function call>
Parser:                       </call-statm>
Parser:                     </statement>
Parser:                   </statm list>
Parser:                 </for-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <call-statm>
Parser:                   <function call>
Parser:                     <expr list>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
 45:     putint(v);
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </expr list>
 46:  }
Parser:                   </function call>
 47:  
Parser:                 </call-statm>
Parser:               </statement>
Parser:             </statm list>
Parser:           </func-body>
Parser:         </func decl>
Parser:         <type>
Parser:         </type>
Parser:         <func decl>
Parser:           <type>
Parser:           </type>
Parser:           <param decl>
Parser:           </param decl>
Parser:           <type>
 48:  int and (int a, int b)
Parser:           </type>
Parser:           <param decl>
 49:  {
Parser:           </param decl>
 50:     /* Compute  a && b . */
 51:  
Parser:           <func-body>
Parser:             <statm list>
Parser:               <statement>
Parser:                 <if-statm>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <statm list>
Parser:                     <statement>
Parser:                       <return-statm>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
 52:     if (a) { return b; }
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </return-statm>
Parser:                     </statement>
Parser:                   </statm list>
Parser:                   <else-part>
Parser:                     <statm list>
Parser:                       <statement>
Parser:                         <return-statm>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
 53:     else   { return 0; }
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
 54:  }
Parser:                         </return-statm>
Parser:                       </statement>
Parser:                     </statm list>
 55:  
Parser:                   </else-part>
Parser:                 </if-statm>
Parser:               </statement>
Parser:             </statm list>
Parser:           </func-body>
Parser:         </func decl>
Parser:         <type>
Parser:         </type>
Parser:         <func decl>
 56:  int print_primes ()
 57:  {
 58:     /* Print the primes, 10 on each line. */
 59:  
Parser:           <func-body>
Parser:             <type>
Parser:             </type>
Parser:             <var decl>
Parser:             </var decl>
Parser:             <type>
 60:     int n_printed;  int i;
Parser:             </type>
Parser:             <var decl>
Parser:             </var decl>
Parser:             <statm list>
Parser:               <statement>
Parser:                 <assign-statm>
Parser:                   <assignment>
Parser:                     <lhs-variable>
Parser:                       <variable>
Parser:                       </variable>
Parser:                     </lhs-variable>
 61:     n_printed = 0;
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                   </assignment>
Parser:                 </assign-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <for-statm>
Parser:                   <for-control>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                       <rel opr>
Parser:                       </rel opr>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
 62:     for (i = 1;  i <= 1000;  i = i+1) {
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </for-control>
Parser:                   <statm list>
Parser:                     <statement>
Parser:                       <if-statm>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
Parser:                                     <expression>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                       </term>
Parser:                                     </expression>
 63:        if (prime[i]) {
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <statm list>
Parser:                           <statement>
Parser:                             <if-statm>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <function call>
Parser:                                           <expr list>
Parser:                                             <expression>
Parser:                                               <term>
Parser:                                                 <factor>
Parser:                                                   <primary>
Parser:                                                     <operand>
Parser:                                                       <function call>
Parser:                                                         <expr list>
Parser:                                                           <expression>
Parser:                                                             <term>
Parser:                                                               <factor>
Parser:                                                                 <primary>
Parser:                                                                   <operand>
Parser:                                                                     <variable>
Parser:                                                                     </variable>
Parser:                                                                   </operand>
Parser:                                                                 </primary>
Parser:                                                               </factor>
Parser:                                                             </term>
Parser:                                                           </expression>
Parser:                                                           <expression>
Parser:                                                             <term>
Parser:                                                               <factor>
Parser:                                                                 <primary>
Parser:                                                                   <operand>
Parser:                                                                     <number>
Parser:                                                                     </number>
Parser:                                                                   </operand>
Parser:                                                                 </primary>
Parser:                                                               </factor>
Parser:                                                             </term>
Parser:                                                           </expression>
Parser:                                                         </expr list>
Parser:                                                       </function call>
Parser:                                                     </operand>
Parser:                                                   </primary>
Parser:                                                 </factor>
Parser:                                               </term>
Parser:                                               <rel opr>
Parser:                                               </rel opr>
Parser:                                               <term>
Parser:                                                 <factor>
Parser:                                                   <primary>
Parser:                                                     <operand>
Parser:                                                       <number>
Parser:                                                       </number>
Parser:                                                     </operand>
Parser:                                                   </primary>
Parser:                                                 </factor>
Parser:                                               </term>
Parser:                                             </expression>
Parser:                                             <expression>
Parser:                                               <term>
Parser:                                                 <factor>
Parser:                                                   <primary>
Parser:                                                     <operand>
Parser:                                                       <variable>
Parser:                                                       </variable>
Parser:                                                     </operand>
Parser:                                                   </primary>
Parser:                                                 </factor>
Parser:                                               </term>
Parser:                                               <rel opr>
Parser:                                               </rel opr>
Parser:                                               <term>
Parser:                                                 <factor>
Parser:                                                   <primary>
Parser:                                                     <operand>
Parser:                                                       <number>
Parser:                                                       </number>
Parser:                                                     </operand>
Parser:                                                   </primary>
Parser:                                                 </factor>
Parser:                                               </term>
Parser:                                             </expression>
Parser:                                           </expr list>
Parser:                                         </function call>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <statm list>
Parser:                                 <statement>
Parser:                                   <call-statm>
Parser:                                     <function call>
Parser:                                       <expr list>
Parser:                                         <expression>
Parser:                                           <term>
Parser:                                             <factor>
Parser:                                               <primary>
Parser:                                                 <operand>
Parser:                                                   <variable>
Parser:                                                   </variable>
Parser:                                                 </operand>
Parser:                                               </primary>
Parser:                                             </factor>
Parser:                                           </term>
Parser:                                         </expression>
Parser:                                       </expr list>
 64:  	 if (and(mod(n_printed,10)==0, n_printed>0)) { putchar(LF); }
Parser:                                     </function call>
Parser:                                   </call-statm>
Parser:                                 </statement>
Parser:                               </statm list>
Parser:                             </if-statm>
Parser:                           </statement>
Parser:                           <statement>
Parser:                             <call-statm>
Parser:                               <function call>
Parser:                                 <expr list>
Parser:                                   <expression>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <number>
Parser:                                             </number>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                     </term>
Parser:                                   </expression>
Parser:                                 </expr list>
Parser:                               </function call>
Parser:                             </call-statm>
Parser:                           </statement>
Parser:                           <statement>
Parser:                             <call-statm>
Parser:                               <function call>
Parser:                                 <expr list>
Parser:                                   <expression>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                     </term>
Parser:                                   </expression>
Parser:                                   <expression>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <number>
Parser:                                             </number>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                     </term>
Parser:                                   </expression>
Parser:                                 </expr list>
Parser:                               </function call>
Parser:                             </call-statm>
Parser:                           </statement>
Parser:                           <statement>
Parser:                             <assign-statm>
Parser:                               <assignment>
Parser:                                 <lhs-variable>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </lhs-variable>
Parser:                                 <expression>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                     <term opr>
 65:  	 putchar(' ');   pn(i,3);   n_printed = n_printed+1;
Parser:                                     </term opr>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <number>
 66:        }
Parser:                                           </number>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </expression>
Parser:                               </assignment>
Parser:                             </assign-statm>
Parser:                           </statement>
Parser:                         </statm list>
 67:     };
Parser:                       </if-statm>
Parser:                     </statement>
Parser:                   </statm list>
Parser:                 </for-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <empty statm>
Parser:                 </empty statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <call-statm>
Parser:                   <function call>
Parser:                     <expr list>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
 68:     putchar(LF);
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </expr list>
 69:  }
Parser:                   </function call>
 70:  
Parser:                 </call-statm>
Parser:               </statement>
Parser:             </statm list>
Parser:           </func-body>
Parser:         </func decl>
Parser:         <type>
Parser:         </type>
Parser:         <func decl>
 71:  int main ()
 72:  {
Parser:           <func-body>
Parser:             <type>
 73:     int i;
Parser:             </type>
Parser:             <var decl>
Parser:             </var decl>
Parser:             <statm list>
Parser:               <statement>
Parser:                 <assign-statm>
Parser:                   <assignment>
Parser:                     <lhs-variable>
Parser:                       <variable>
Parser:                       </variable>
Parser:                     </lhs-variable>
 74:     LF = 10;
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <number>
 75:  
 76:     /* Initialize the sieve by assuming all numbers >1 to be primes: */
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                   </assignment>
Parser:                 </assign-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <assign-statm>
Parser:                   <assignment>
Parser:                     <lhs-variable>
Parser:                       <variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </variable>
Parser:                     </lhs-variable>
 77:     prime[1] = 0;
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                   </assignment>
Parser:                 </assign-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <for-statm>
Parser:                   <for-control>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                       <rel opr>
Parser:                       </rel opr>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </for-control>
Parser:                   <statm list>
Parser:                     <statement>
Parser:                       <assign-statm>
Parser:                         <assignment>
Parser:                           <lhs-variable>
Parser:                             <variable>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </variable>
Parser:                           </lhs-variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
 78:     for (i=2; i<=1000; i=i+1) { prime[i] = 1; }
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </assignment>
 79:  
 80:     /* Find and print the primes: */
Parser:                       </assign-statm>
Parser:                     </statement>
Parser:                   </statm list>
Parser:                 </for-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <call-statm>
Parser:                   <function call>
Parser:                     <expr list>
Parser:                     </expr list>
Parser:                   </function call>
Parser:                 </call-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <call-statm>
Parser:                   <function call>
 81:     find_primes();  print_primes();
Parser:                     <expr list>
Parser:                     </expr list>
Parser:                   </function call>
Parser:                 </call-statm>
Parser:               </statement>
Parser:               <statement>
Parser:                 <return-statm>
 82:     return 0;
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
 83:  }
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </return-statm>
Parser:               </statement>
Parser:             </statm list>
Parser:           </func-body>
Parser:         </func decl>
Parser:       </program>
Tree:     int prime[1001];
Tree:     int LF;
Tree:     int find_primes() {
Tree:       int i1;
Tree:       int i2;
Tree:       for (i1 = 2; i1 <= 1000; i1 = i1 + 1) {
Tree:         for (i2 = 2 * i1; i2 <= 1000; i2 = i2 + i1) {
Tree:           prime[i2] = 0;
Tree:         }
Tree:       }
Tree:     }
Tree:     int mod(int a, int b) {
Tree:       return a - a / b * ;
Tree:     }
Tree:     int n_chars(int a) {
Tree:       if (a < 0) {
Tree:         return 1 + n_chars( -a);
Tree:       }
Tree:       ;
Tree:       if (a <= 9) {
Tree:         return 1;
Tree:       }
Tree:       ;
Tree:       return n_chars(a / 10) + 1;
Tree:     }
Tree:     int pn(int v, int w) {
Tree:       int i;
Tree:       for (i = n_chars(v) + 1; i <= w; i = i + 1) {
Tree:         putchar(32);
Tree:       }
Tree:       putint(v);
Tree:     }
Tree:     int and(int a, int b) {
Tree:       if (a) {
Tree:         return b;
Tree:       } else {
Tree:         return 0;
Tree:       }
Tree:     }
Tree:     int print_primes() {
Tree:       int n_printed;
Tree:       int i;
Tree:       n_printed = 0;
Tree:       for (i = 1; i <= 1000; i = i + 1) {
Tree:         if (prime[i]) {
Tree:           if (and(mod(n_printed, 10) == 0, n_printed > 0)) {
Tree:             putchar(LF);
Tree:           }
Tree:           putchar(32);
Tree:           pn(i, 3);
Tree:           n_printed = n_printed + 1;
Tree:         }
Tree:       }
Tree:       ;
Tree:       putchar(LF);
Tree:     }
Tree:     int main() {
Tree:       int i;
Tree:       LF = 10;
Tree:       prime[1] = 0;
Tree:       for (i = 2; i <= 1000; i = i + 1) {
Tree:         prime[i] = 1;
Tree:       }
Tree:       find_primes();
Tree:       print_primes();
Tree:       return 0;
Tree:     }

 1:   /* Program 'pointers'
 2:     ------------------
 3:     Tests various use of pointers.
 4:  */
 5:  
Scanner:	intToken
Scanner:	nameToken LF
Scanner:	semicolonToken
 6:  int LF;
 7:  
Scanner:	intToken
Scanner:	nameToken test1
Scanner:	leftParToken
Scanner:	rightParToken
 8:  int test1 ()
Scanner:	leftCurlToken
 9:  {
Scanner:	intToken
Scanner:	nameToken v
Scanner:	semicolonToken
 10:     int v;
Scanner:	intToken
Scanner:	starToken
Scanner:	nameToken p1
Scanner:	semicolonToken
 11:     int *p1;
Scanner:	intToken
Scanner:	starToken
Scanner:	starToken
Scanner:	nameToken p2
Scanner:	semicolonToken
 12:     int **p2;
Scanner:	intToken
Scanner:	starToken
Scanner:	starToken
Scanner:	starToken
Scanner:	nameToken p3
Scanner:	semicolonToken
 13:     int ***p3;
 14:  
Scanner:	nameToken p1
Scanner:	assignToken
Scanner:	ampToken
Scanner:	nameToken v
Scanner:	semicolonToken
Scanner:	nameToken p2
Scanner:	assignToken
Scanner:	ampToken
Scanner:	nameToken p1
Scanner:	semicolonToken
Scanner:	nameToken p3
Scanner:	assignToken
Scanner:	ampToken
Scanner:	nameToken p2
Scanner:	semicolonToken
 15:     p1 = &v;  p2 = &p1;  p3 = &p2; 
Scanner:	nameToken v
Scanner:	assignToken
Scanner:	numberToken 17
Scanner:	semicolonToken
Scanner:	starToken
Scanner:	nameToken p1
Scanner:	assignToken
Scanner:	starToken
Scanner:	nameToken p1
Scanner:	addToken
Scanner:	numberToken 1
Scanner:	semicolonToken
Scanner:	starToken
Scanner:	starToken
Scanner:	nameToken p2
Scanner:	assignToken
Scanner:	starToken
Scanner:	leftParToken
Scanner:	starToken
Scanner:	nameToken p2
Scanner:	rightParToken
Scanner:	addToken
Scanner:	numberToken 2
Scanner:	semicolonToken
Scanner:	starToken
Scanner:	starToken
Scanner:	starToken
Scanner:	nameToken p3
Scanner:	assignToken
Scanner:	starToken
Scanner:	leftParToken
Scanner:	starToken
Scanner:	leftParToken
Scanner:	starToken
Scanner:	nameToken p3
Scanner:	rightParToken
Scanner:	rightParToken
Scanner:	addToken
Scanner:	numberToken 3
Scanner:	semicolonToken
 16:     v = 17;  *p1 = *p1+1;  **p2 = *(*p2)+2;  ***p3 = *(*(*p3))+3;
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	numberToken 118
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	numberToken 61
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putint
Scanner:	leftParToken
Scanner:	starToken
Scanner:	nameToken p1
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	numberToken 61
Scanner:	rightParToken
Scanner:	semicolonToken
 17:     putchar('v');  putchar('=');  putint(*p1);  putchar('=');
Scanner:	nameToken putint
Scanner:	leftParToken
Scanner:	starToken
Scanner:	leftParToken
Scanner:	starToken
Scanner:	nameToken p2
Scanner:	rightParToken
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	numberToken 61
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putint
Scanner:	leftParToken
Scanner:	starToken
Scanner:	leftParToken
Scanner:	starToken
Scanner:	leftParToken
Scanner:	starToken
Scanner:	leftParToken
Scanner:	nameToken p3
Scanner:	rightParToken
Scanner:	rightParToken
Scanner:	rightParToken
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	nameToken LF
Scanner:	rightParToken
Scanner:	semicolonToken
 18:     putint(*(*p2));  putchar('=');  putint(*(*(*(p3))));  putchar(LF);
Scanner:	rightCurlToken
 19:  }
 20:  
Scanner:	intToken
Scanner:	nameToken test2
Scanner:	leftParToken
Scanner:	rightParToken
 21:  int test2()
Scanner:	leftCurlToken
 22:  {
Scanner:	intToken
Scanner:	nameToken a
Scanner:	leftBracketToken
Scanner:	numberToken 10
Scanner:	rightBracketToken
Scanner:	semicolonToken
 23:     int a[10];
Scanner:	intToken
Scanner:	starToken
Scanner:	nameToken a0
Scanner:	semicolonToken
Scanner:	intToken
Scanner:	starToken
Scanner:	nameToken a4
Scanner:	semicolonToken
 24:     int* a0;  int* a4;
 25:  
Scanner:	nameToken a
Scanner:	leftBracketToken
Scanner:	numberToken 0
Scanner:	rightBracketToken
Scanner:	assignToken
Scanner:	subtractToken
Scanner:	numberToken 2
Scanner:	semicolonToken
 26:     a[0] = -2;
Scanner:	nameToken a0
Scanner:	assignToken
Scanner:	nameToken a
Scanner:	semicolonToken
 27:     a0 = a;  
Scanner:	nameToken a4
Scanner:	assignToken
Scanner:	ampToken
Scanner:	nameToken a
Scanner:	leftBracketToken
Scanner:	numberToken 4
Scanner:	rightBracketToken
Scanner:	semicolonToken
 28:     a4 = &a[4];  
Scanner:	nameToken a4
Scanner:	leftBracketToken
Scanner:	subtractToken
Scanner:	numberToken 4
Scanner:	rightBracketToken
Scanner:	assignToken
Scanner:	nameToken a4
Scanner:	leftBracketToken
Scanner:	subtractToken
Scanner:	numberToken 4
Scanner:	rightBracketToken
Scanner:	subtractToken
Scanner:	numberToken 1
Scanner:	semicolonToken
 29:     a4[-4] = a4[-4]-1;
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	numberToken 97
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	numberToken 48
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	numberToken 61
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putint
Scanner:	leftParToken
Scanner:	starToken
Scanner:	nameToken a0
Scanner:	rightParToken
Scanner:	semicolonToken
Scanner:	nameToken putchar
Scanner:	leftParToken
Scanner:	nameToken LF
Scanner:	rightParToken
Scanner:	semicolonToken
 30:     putchar('a');  putchar('0');  putchar('=');  putint(*a0);  putchar(LF);
Scanner:	rightCurlToken
 31:  }
 32:  
Scanner:	intToken
Scanner:	nameToken main
Scanner:	leftParToken
Scanner:	rightParToken
 33:  int main ()
Scanner:	leftCurlToken
 34:  {
Scanner:	nameToken LF
Scanner:	assignToken
Scanner:	numberToken 10
Scanner:	semicolonToken
 35:     LF = 10;  /* Line feed character */
Scanner:	nameToken test1
Scanner:	leftParToken
Scanner:	rightParToken
Scanner:	semicolonToken
 36:     test1();  
Scanner:	nameToken test2
Scanner:	leftParToken
Scanner:	rightParToken
Scanner:	semicolonToken
 37:     test2();  
Scanner:	nameToken exit
Scanner:	leftParToken
Scanner:	numberToken 0
Scanner:	rightParToken
Scanner:	semicolonToken
 38:     exit(0);
Scanner:	rightCurlToken
 39:  }
Scanner:	eofToken

Parser:       <program>
Parser:         <type>
Parser:         </type>
 1:   int main ()
 2:  {
Parser:         <func-body>
Parser:           <type>
Parser:           </type>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:       </var decl>
Parser:       <type>
 3:     int a;  int b;  int c;
Parser:       </type>
 4:  
Parser:     </var decl>
Parser:       <statm list>
Parser:         <statement>
Parser:           <assign-statm>
Parser:             <assignment>
Parser:               <lhs-variable>
Parser:                 <variable>
Parser:                 </variable>
Parser:               </lhs-variable>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:             </assignment>
Parser:           </assign-statm>
Parser:         </statement>
Parser:         <statement>
Parser:           <assign-statm>
Parser:             <assignment>
Parser:               <lhs-variable>
Parser:                 <variable>
Parser:                 </variable>
Parser:               </lhs-variable>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:             </assignment>
Parser:           </assign-statm>
Parser:         </statement>
Parser:         <statement>
Parser:           <assign-statm>
Parser:             <assignment>
Parser:               <lhs-variable>
Parser:                 <variable>
Parser:                 </variable>
Parser:               </lhs-variable>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <function call>
 5:     a = getint();  b = getint();  c = getint();
Parser:                           <expr list>
Parser:                           </expr list>
 6:  
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:             </assignment>
Parser:           </assign-statm>
Parser:         </statement>
Parser:         <statement>
Parser:           <if-statm>
Parser:             <expression>
Parser:               <term>
Parser:                 <factor>
Parser:                   <primary>
Parser:                     <operand>
Parser:                       <variable>
Parser:                       </variable>
Parser:                     </operand>
Parser:                   </primary>
Parser:                 </factor>
Parser:               </term>
Parser:               <rel opr>
Parser:               </rel opr>
Parser:               <term>
Parser:                 <factor>
Parser:                   <primary>
Parser:                     <operand>
Parser:                       <variable>
Parser:                       </variable>
Parser:                     </operand>
Parser:                   </primary>
Parser:                 </factor>
Parser:               </term>
Parser:             </expression>
AlboC error in line 6: A rightParToken expected, but found a equalToken!
